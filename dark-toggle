#!/bin/sh

# A small POSIX compliant script to toggle between dark and light variant
# of a theme for GNOME/GTK based applications.

# Copyright (C) 2021 Rifaz Nahiyan
# This code is licensed under the MIT License.
# View the license in its entirety at: https://opensource.org/licenses/MIT

# Constants
SCRIPTNAME="${0##*/}"
SCRIPTNAME="${SCRIPTNAME%.sh}"
SYS_CONFIG="/etc/dark-toggle/config"
USER_CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/dark-toggle/config"

# Options from CLI or config
change_icons=false
change_shell=false
exec_hooks=false

# Globals
variant_found=
warnings=

# Theme functions

get_current_theme () {
	gsettings get org.gnome.desktop.interface gtk-theme | tr --delete \'
}

set_theme () {
	gsettings set org.gnome.desktop.interface gtk-theme "$1"
	# Unfortunately, gsettings always reports exit status 0
}

# Sanity checks
die () {
	# Display a formatted message, then exit with error
	printf "%s: %s\n" "${0##*/}" "${*}" >&2
	exit 1
}

print_warnings () {
	IFS=:
	printf "%s: errors while parsing the config file.\n" "${SCRIPTNAME}" >&2
	printf " - %s\n" $* >&2
	unset IFS
}

deps_check () {
	# Check dependencies. Currently, all deps are considered required.
	local deps="gsettings notify-send sed tr"
	local missing=""
	for dep in ${deps}; do
		command -v "${dep}" >/dev/null || missing="${missing} ${dep}"
	done
	if [ -n "${missing}" ]
	then
		die "Missing necessary dependencies: ${missing}"
	fi
}

theme_check () {
	local user_theme="$HOME/.themes/$1"
	local system_theme="/usr/share/themes/$1"
	[ -f "$user_theme/gtk-3.0/gtk.css" ] || [ -f "$system_theme/gtk-3.0/gtk.css" ]
}

# Configuration

parse_conf_tokens () {
	local alt_theme= variant=
	local shift_by=1
	while [ $# -gt 0 ]
	do
		case $1 in
			# Options
			change-icons) change_icons=true ;;
			change-shell) change_shell=true ;;
			exec-hooks) exec_hooks=true ;;

			# Mappings
			mappings) [ $2 = '{' ] && shift_by=2 && shift 2 ;;
			'}') shift_by=1 ;;
		esac

		# Parse mappings
		if [ $shift_by -eq 2 ]
		then
			pair="$1 $2"
			read left right <<-EOF
				$pair
			EOF
			[ "$left" = "$current_theme" ] && alt_theme="$right" && variant="dark"
			[ "$right" = "$current_theme" ] && alt_theme="$left" && variant="light"
		fi
			
		shift $shift_by
	done

	[ -n "$alt_theme" ] && printf "$alt_theme $variant"
}

parse_config () {
	local config_file="$1"
	local tokens="$(sed 's/#.*//' "$config_file" | tr '[[:space:]]' ' ')"

	# Space seperated line having alternate theme and it's variant
	theme_and_variant="$(parse_conf_tokens $tokens)"

	printf "$theme_and_variant"
}

main () {
	# Check if necessary and optional dependecies are there, else exit
	deps_check
	current_theme="$(get_current_theme)"

	# Parse the config files
	if [ -f "$SYS_CONFIG" ]; then
		sys_parsed="$(parse_config "$SYS_CONFIG")"
	fi

	if [ -f "$USER_CONFIG" ]; then
		usr_parsed="$(parse_config "$USER_CONFIG")"
	fi

	# First, try to find the alternate variant of current theme from user config
	if [ -n "$usr_parsed" ]; then
		read new_theme variant <<-EOF
			$usr_parsed
		EOF

		if ! theme_check "$new_theme"; then
			variant_found=
			warning="The user-defined variant of the current theme is not installed in the system."
			warnings="$warnings""$warning:"
		else
			variant_found="$variant (custom)"
		fi
	fi

	# If alternate theme not found in user config, try system config
	if [ -z "$variant_found" ] && [ -n "$sys_parsed" ]; then
		read new_theme variant <<-EOF
			$sys_parsed
		EOF

		if ! theme_check "$new_theme"; then
			variant_found=
			warning="The alternate variant of the current theme is not installed in the system."
			warnings="$warnings""$warning:"
		else
			variant_found="$variant"
		fi
	fi

	# Config file is used for theme names that are not predictable, and for 
	# letting the user have custom light/dark theme combos.
	# Most themes will be guessed by the following code, since conventionally,
	# the suffixes -light and -dark are used to differentiate betwn variants.

	# If the current theme has the -dark suffix in it, replace with -light
	# Same logic for theme having suffix -light
	[ -z "$variant_found" ] && case $current_theme in
		*-[dD]ark)
			base_name="${current_theme%-[Dd]ark}"
			new_theme="$base_name"

			if ! theme_check "$new_theme"
			then
				new_theme="${base_name}-Light"
			fi

			if ! theme_check "$new_theme"
			then
				new_theme="${base_name}-light"
			fi
			;;

		*-[lL]ight)
			# new_theme="${current_theme//[lL]ight/Dark}"
			new_theme="${current_theme%[lL]ight}Dark"
			theme_check "$new_theme" || new_theme="${new_theme%Dark}dark"
			variant_found=dark
			;;

		*)
			new_theme="$current_theme"-dark
			theme_check "$new_theme" || new_theme="$current_theme"-Dark
			variant_found=dark
			;;
	esac

	[ -n "$warnings" ] && print_warnings "$warnings"

	theme_check "$new_theme" || die "The theme is not installed: ${new_theme}"
	set_theme "$new_theme"
	notify_msg="Theme switched to ${variant_found:-light} variant."
	notify-send -t 5000 "${SCRIPTNAME}" "$notify_msg"
}

main "${@}"

# vim: noexpandtab
